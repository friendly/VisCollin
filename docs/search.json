[{"path":"https://friendly.github.io/VisCollin/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Friendly. Author, maintainer.","code":""},{"path":"https://friendly.github.io/VisCollin/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Friendly M (2023). VisCollin: Visualizing Collinearity Diagnostics. R package version 0.1.1, https://github.com/friendly/VisCollin.","code":"@Manual{,   title = {VisCollin: Visualizing Collinearity Diagnostics},   author = {Michael Friendly},   year = {2023},   note = {R package version 0.1.1},   url = {https://github.com/friendly/VisCollin}, }"},{"path":"https://friendly.github.io/VisCollin/index.html","id":"viscollin-","dir":"","previous_headings":"","what":"Visualizing Collinearity Diagnostics","title":"Visualizing Collinearity Diagnostics","text":"Visualizing Collinearity Diagnostics Version 0.1.1 VisCollin package provides methods calculate diagnostics multicollinearity among predictors linear generalized linear model. also provides methods visualize diagnostics following Friendly & Kwan (2009), “’s Waldo: Visualizing Collinearity Diagnostics”, American Statistician, 63, 56–65. include: better tabular presentation collinearity diagnostics highlight important numbers. semi-graphic tableplot diagnostics make warning danger levels salient collinearity biplot smallest dimensions predictor space, collinearity apparent.","code":""},{"path":[]},{"path":"https://friendly.github.io/VisCollin/index.html","id":"tutorial-example","dir":"","previous_headings":"","what":"Tutorial example","title":"Visualizing Collinearity Diagnostics","text":"example uses cars data set containing various measures size performance 406 models automobiles 1982. Interest focused predicting gas mileage, mpg.","code":"library(VisCollin) library(dplyr) library(tidyr) library(car) library(corrplot) data(cars) str(cars) #> 'data.frame':    406 obs. of  10 variables: #>  $ make    : Factor w/ 30 levels \"amc\",\"audi\",\"bmw\",..: 6 4 22 1 12 12 6 22 23 1 ... #>  $ model   : chr  \"chevelle\" \"skylark\" \"satellite\" \"rebel\" ... #>  $ mpg     : num  18 15 18 16 17 15 14 14 14 15 ... #>  $ cylinder: int  8 8 8 8 8 8 8 8 8 8 ... #>  $ engine  : num  307 350 318 304 302 429 454 440 455 390 ... #>  $ horse   : int  130 165 150 150 140 198 220 215 225 190 ... #>  $ weight  : int  3504 3693 3436 3433 3449 4341 4354 4312 4425 3850 ... #>  $ accel   : num  12 11.5 11 12 10.5 10 9 8.5 10 8.5 ... #>  $ year    : int  70 70 70 70 70 70 70 70 70 70 ... #>  $ origin  : Factor w/ 3 levels \"Amer\",\"Eur\",\"Japan\": 1 1 1 1 1 1 1 1 1 1 ..."},{"path":"https://friendly.github.io/VisCollin/index.html","id":"fit-a-model","dir":"","previous_headings":"Tutorial example","what":"Fit a model","title":"Visualizing Collinearity Diagnostics","text":"Fit model predicting gas mileage (mpg) number cylinders, engine displacement, horsepower, weight, time accelerate 0 – 60 mph model year (1970–1982). Perhaps surprisingly, weight year appear significantly predict gas mileage. ’s going ? lmtest::coeftest() shows coefficients, $\\hat{\\beta_j}$, standard errors $s(\\hat{\\beta_j})$ associated t statistics, $t = \\hat{\\beta_j} / s(\\hat{\\beta_j})$. see, standard errors non-significant predictors inflated due high multiple correlations among predictors, making t statistics smaller.","code":"cars.mod <- lm (mpg ~ cylinder + engine + horse + weight + accel + year,                  data=cars) Anova(cars.mod) #> Anova Table (Type II tests) #>  #> Response: mpg #>           Sum Sq  Df F value Pr(>F)     #> cylinder      12   1    0.99   0.32     #> engine        13   1    1.09   0.30     #> horse          0   1    0.00   0.98     #> weight      1214   1  102.84 <2e-16 *** #> accel          8   1    0.70   0.40     #> year        2419   1  204.99 <2e-16 *** #> Residuals   4543 385                    #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 lmtest::coeftest(cars.mod) #>  #> t test of coefficients: #>  #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -1.45e+01   4.76e+00   -3.05   0.0024 **  #> cylinder    -3.30e-01   3.32e-01   -0.99   0.3212     #> engine       7.68e-03   7.36e-03    1.04   0.2973     #> horse       -3.91e-04   1.38e-02   -0.03   0.9775     #> weight      -6.79e-03   6.70e-04  -10.14   <2e-16 *** #> accel        8.53e-02   1.02e-01    0.84   0.4038     #> year         7.53e-01   5.26e-02   14.32   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://friendly.github.io/VisCollin/index.html","id":"correlation-matrix","dir":"","previous_headings":"Tutorial example","what":"Correlation matrix","title":"Visualizing Collinearity Diagnostics","text":"often recommended examine correlation matrix predictors diagnose collinearity problems. general case, advice misguided, 0-order correlations matter, rather multiple correlations predicting independent variable others, Rxj|others. Nonetheless, instructive examine correlations. , better yet, use corrplot::corrplot.mixed() visualize , using color shading glyphs,  message seems two clusters predictors high correlations: {cylinder, engine, horse weight}, {accel, year}.","code":"R <- cars |>    select(cylinder:year) |>    tidyr::drop_na() |>   cor()  100 * R |> round(digits = 2) #>          cylinder engine horse weight accel year #> cylinder      100     95    84     90   -52  -36 #> engine         95    100    90     93   -56  -38 #> horse          84     90   100     87   -70  -42 #> weight         90     93    87    100   -43  -32 #> accel         -52    -56   -70    -43   100   30 #> year          -36    -38   -42    -32    30  100 corrplot.mixed(R, lower = \"square\", upper = \"ellipse\", tl.col = \"black\")"},{"path":"https://friendly.github.io/VisCollin/index.html","id":"variance-inflation-factors","dir":"","previous_headings":"Tutorial example","what":"Variance inflation factors","title":"Visualizing Collinearity Diagnostics","text":"Variance inflation factors measure effect multicollinearity standard errors estimated coefficients proportional 1/(1−Rxj|others2). check variance inflation factors, using car::vif(). see predictors high VIFs, indicating moderately severe multicollinearity. According $\\sqrt{\\text{VIF}}$, standard error cylinder multiplied 3.26 ’s t-value divided number, compared case predictors uncorrelated. engine, horse weight suffer similar fate.","code":"vif(cars.mod) #> cylinder   engine    horse   weight    accel     year  #>    10.63    19.64     9.40    10.73     2.63     1.24  sqrt(vif(cars.mod)) #> cylinder   engine    horse   weight    accel     year  #>     3.26     4.43     3.07     3.28     1.62     1.12"},{"path":"https://friendly.github.io/VisCollin/index.html","id":"collinearity-diagnostics","dir":"","previous_headings":"Tutorial example","what":"Collinearity diagnostics","title":"Visualizing Collinearity Diagnostics","text":"diagnostic measures introduced Belsley (1991) based eigenvalues λ1, λ2, …λp correlation matrix RX predictors (preferably centered scaled, including constant term intercept), corresponding eigenvectors columns Vp × p. colldiag() calculates: Condition indices: smallest eigenvalues, λj ≈ 0, indicate collinearity number small values indicates number near collinear relations. sum eigenvalues, Σλi = p increases number predictors p, useful scale relation largest. leads condition indices, defined $\\kappa_j = \\sqrt{ \\lambda_1 / \\lambda_j}$. property resulting numbers common interpretations regardless number predictors. completely uncorrelated predictors, κj = 1. κj → ∞ λk → 0. terms eigen-decomposition, variance inflation factors can expressed $$ \\text{VIF}_j = \\sum_{k=1}^{p} \\frac{V^2_{jk}}{\\lambda_k} \\; . $$ Variance decomposition proportions: Large VIFs indicate variables involved nearly collinear relations, don’t indicate variable(s) involved . purpose, Belsley et. al. (1980) Belsley (1991) proposed calculation proportions variance variable associated principal component decomposition coefficient variance dimension. current model, usual display contains condition indices variance proportions. However, even small example, often difficult know numbers pay attention . Belsley (1991) recommends sources collinearity diagnosed () components large κj, (b) components variance proportion large (say,  ≥ 0.5) two predictors. print method \"colldiag\" objects fuzz argument controlling . mystery solved: two nearly collinear relations among predictors, corresponding two smallest dimensions. Dimension 5 reflects high correlation horsepower weight, Dimension 6 reflects high correlation number cylinders engine displacement. Note high variance proportion year (0.787) second component creates problem ignored () condition index low (b) shares nothing predictors.","code":"(cd <- colldiag(cars.mod, center=TRUE)) #> Condition #> Index    Variance Decomposition Proportions #>           cylinder engine horse weight accel year  #> 1   1.000 0.005    0.003  0.005 0.004  0.009 0.010 #> 2   2.252 0.004    0.002  0.000 0.007  0.022 0.787 #> 3   2.515 0.004    0.001  0.002 0.010  0.423 0.142 #> 4   5.660 0.309    0.014  0.306 0.087  0.063 0.005 #> 5   8.342 0.115    0.000  0.654 0.715  0.469 0.052 #> 6  10.818 0.563    0.981  0.032 0.176  0.013 0.004 print(cd, fuzz = 0.5) #> Condition #> Index    Variance Decomposition Proportions #>           cylinder engine horse weight accel year  #> 1   1.000  .        .      .     .      .     .    #> 2   2.252  .        .      .     .      .    0.787 #> 3   2.515  .        .      .     .      .     .    #> 4   5.660  .        .      .     .      .     .    #> 5   8.342  .        .     0.654 0.715   .     .    #> 6  10.818 0.563    0.981   .     .      .     ."},{"path":"https://friendly.github.io/VisCollin/index.html","id":"tableplot","dir":"","previous_headings":"Tutorial example","what":"Tableplot","title":"Visualizing Collinearity Diagnostics","text":"simplified tabular display can improved make patterns collinearity visually apparent signify warnings directly eyes. “tableplot” (Kwan, 2009) semi-graphic display presents numerical information table using shapes proportional value cell visual attributes (shape type, color fill, forth) encode information. collinearity diagnostics, show: condition indices, using using squares whose background color red condition indices > 10, green values > 5 green otherwise, reflecting danger, warning OK respectively. value condition index encoded within using white square whose side proportional value (maximum value, cond.max). Variance decomposition proportions shown filled circles whose radius proportional values filled (default) shades ranging white pink red. Rounded values diagnostics printed cells. tableplot encodes information values colldiag() printed (using prop.col color breaks variance proportions < 0.3 shaded white). visual message one attend collinearities large condition indices large variance proportions implicating two predictors.","code":"tableplot(cd, title = \"Tableplot of cars data\", cond.max = 30 )"},{"path":"https://friendly.github.io/VisCollin/index.html","id":"collinearity-biplot","dir":"","previous_headings":"Tutorial example","what":"Collinearity biplot","title":"Visualizing Collinearity Diagnostics","text":"standard biplot (Gabriel, 1971; Gower& Hand 1996) can regarded multivariate analog scatterplot, obtained projecting multivariate sample low-dimensional space (typically 2 3 dimensions) accounting greatest variance data. symmetric (PCA) scaling used , equivalent plot principal component scores mean-centered matrix $\\widetilde{\\mathbf{X}} = \\mathbf{X} - \\bar{\\mathbf{X}}$ predictors observations (shown points case labels), together principal component coefficients variables (shown vectors) 2D (3D) space. However standard biplot less useful visualizing relations among predictors lead nearly collinear relations. Instead, biplots smallest dimensions show relations directly, can show features data well, outliers leverage points. use prcomp(X, scale.=TRUE) obtain PCA correlation matrix predictors: standard deviations square roots $\\sqrt{\\lambda_j}$ eigenvalues correlation matrix, returned sdev component \"prcomp\" object. eigenvectors returned rotation component, whose directions arbitrary. collinearity biplot constructed follows:  projections variable vectors Dimension 5 Dimension 6 axes proportional variance proportions shown . relative lengths variable vectors can considered indicate extent variable contributes collinearity two near-singular dimensions. Thus, see Dimension 6 largely determined engine size, substantial relation cylinder. Dimension 5 ’ strongest relations Weight horse. Moreover, one observation, #20, stands outlier predictor space, far centroid. turns vehicle, Buick Estate wagon, early-year (1970) American behemoth, 8-cylinder, 455 cu. , 225 horse-power engine, able go 0 60 mph 10 sec. (MPG slightly -predicted regression model, however.)","code":"cars.X <- cars |>   select(where(is.numeric)) |>   select(-mpg) |>   tidyr::drop_na() cars.pca <- prcomp(cars.X, scale. = TRUE) cars.pca #> Standard deviations (1, .., p=6): #> [1] 2.070 0.911 0.809 0.367 0.245 0.189 #>  #> Rotation (n x k) = (6 x 6): #>             PC1    PC2    PC3    PC4     PC5     PC6 #> cylinder -0.454 0.1869 -0.168  0.659 -0.2711  0.4725 #> engine   -0.467 0.1628 -0.134  0.193 -0.0109 -0.8364 #> horse    -0.462 0.0177  0.123 -0.620 -0.6123  0.1067 #> weight   -0.444 0.2598 -0.278 -0.350  0.6860  0.2539 #> accel     0.330 0.2098 -0.865 -0.143 -0.2774 -0.0337 #> year      0.237 0.9092  0.335 -0.025 -0.0624 -0.0142 # Make labels for dimensions include % of variance pct <- 100 *(cars.pca$sdev^2) / sum(cars.pca$sdev^2) lab <- glue::glue(\"Dimension {1:6} ({round(pct, 2)}%)\")  # Direction of eigenvectors is arbitrary. Reflect them cars.pca$rotation <- -cars.pca$rotation op <- par(lwd = 2, xpd = NA ) biplot(cars.pca,        choices=6:5,           # only the last two dimensions        scale=0.5,             # symmetric biplot scaling        cex=c(0.6, 1),         # character sizes for points and vectors        col = c(\"black\", \"blue\"),        expand = 1.7,          # expand variable vectors for visibility        xlab = lab[6],        ylab = lab[5],        xlim = c(-0.7, 0.5),        ylim = c(-0.8, 0.5)       ) par(op)"},{"path":"https://friendly.github.io/VisCollin/index.html","id":"remedies-for-collinearity-what-to-do","dir":"","previous_headings":"Tutorial example","what":"Remedies for collinearity: What to do?","title":"Visualizing Collinearity Diagnostics","text":"Collinearity often data problem, magic cure. Nevertheless general guidelines useful techniques address problem. Pure prediction: interested predicting / explaining outcome, model coefficients “significant”, collinearity can largely ignored. fitted values unaffected collinearity. structural collinearity: Sometimes collinearity results structural relations among variables: example, polynomial terms, like x, x2, x3 interaction terms like x1, x2, x1 * x2 necessarily correlated. simple cure center predictors means, using x − x̄, (x−x̄)2, (x−x̄)3 (x1−x̄1), (x2−x̄2), (x1−x̄1) * (x2−x̄2) predictors share common cause, GNP population time-series cross-national data, can reduce collinearity re-defining predictors reflect per capita measures. Model re-specification: Drop one regressors high VIF deemed essential Replace highly correlated regressors linear combination(s) . example, two related variables, x1 x2 can replaced without loss information replacing sum difference, z1 = x1 + x2 z2 = x1 − x2. Statistical remedies: Transform predictors uncorrelated principal components use regularization methods ridge regression lasso, correct collinearity introducing small amount bias, shrinking coefficients towards 0. See genridge pkgdown documentation visualization methods. use Bayesian regression; multicollinearity prevents regression coefficient estimated precisely, prior coefficient help reduce posterior variance.","code":""},{"path":"https://friendly.github.io/VisCollin/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Visualizing Collinearity Diagnostics","text":"Belsley, D.., Kuh, E. Welsch, R. (1980). Regression Diagnostics, New York: John Wiley & Sons. Belsley, D.. (1991). Conditioning diagnostics, collinearity weak data regression. New York: John Wiley & Sons. Friendly, M., & Kwan, E. (2009). “’s Waldo: Visualizing Collinearity Diagnostics.” American Statistician, 63, 56–65. Online: https://www.datavis.ca/papers/viscollin-tast.pdf. Supp. materials: https://www.datavis.ca/papers/viscollin/ Gabriel, K. R. (1971). Biplot Graphic Display Matrices Application Principal Components Analysis. Biometrics, 58, 453–467. Gower, J. C., & Hand, D. J. (1996). Biplots. London: Chapman & Hall.","code":""},{"path":"https://friendly.github.io/VisCollin/reference/biomass.html","id":null,"dir":"Reference","previous_headings":"","what":"Biomass Production in the Cape Fear Estuary — biomass","title":"Biomass Production in the Cape Fear Estuary — biomass","text":"Data collected Rick Linthurst (1979) North Carolina State University purpose identifying important soil characteristics influencing aerial biomass production marsh grass Spartina alterniflora Cape Fear Estuary North Carolina. Three types Spartina vegetation areas (devegetated “dead” areas, “short” Spartina areas, “tall” Spartina areas) sampled three locations (Oak Island, Smith Island, Snows Marsh) Samples soil substrate 5 random sites within location–vegetation type (giving 45 total samples) analyzed 14 soil physico-chemical characteristics month several months.","code":""},{"path":"https://friendly.github.io/VisCollin/reference/biomass.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Biomass Production in the Cape Fear Estuary — biomass","text":"data frame 45 observations following 17 variables. loc location, factor levels OI SI SM type area type, factor levels DVEG SHRT TALL biomass aerial biomass \\(gm^{-2}\\), numeric vector H2S hydrogen sulfide ppm, numeric vector sal percent salinity, numeric vector Eh7 ester-hydrolase, numeric vector pH acidity measured water, numeric vector buf numeric vector P phosphorus ppm, numeric vector K potassium ppm, numeric vector Ca calcium ppm, numeric vector Mg magnesium ppm, numeric vector Na sodium ppm, numeric vector Mn manganese ppm, numeric vector Zn zinc ppm, numeric vector Cu copper ppm, numeric vector NH4 ammonium ion ppm, numeric vector","code":""},{"path":"https://friendly.github.io/VisCollin/reference/biomass.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Biomass Production in the Cape Fear Estuary — biomass","text":"Rawlings, J. O., Pantula, S. G., & Dickey, D. . (2001). Applied Regression Analysis: Research Tool, 2nd Ed., Springer New York. Table 5.1.","code":""},{"path":"https://friendly.github.io/VisCollin/reference/biomass.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Biomass Production in the Cape Fear Estuary — biomass","text":"R. . Linthurst. Aeration, nitrogen, pH salinity factors affecting Spartina Alterniflora growth dieback. PhD thesis, North Carolina State University, 1979.","code":""},{"path":"https://friendly.github.io/VisCollin/reference/biomass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Biomass Production in the Cape Fear Estuary — biomass","text":"","code":"data(biomass) str(biomass) #> 'data.frame':\t45 obs. of  17 variables: #>  $ loc    : Factor w/ 3 levels \"OI\",\"SI\",\"SM\": 1 1 1 1 1 1 1 1 1 1 ... #>  $ type   : Factor w/ 3 levels \"DVEG\",\"SHRT\",..: 1 1 1 1 1 2 2 2 2 2 ... #>  $ biomass: int  676 516 1052 868 1008 436 544 680 640 492 ... #>  $ H2S    : int  -610 -570 -610 -560 -610 -620 -590 -610 -580 -610 ... #>  $ sal    : int  33 35 32 30 33 33 36 30 38 30 ... #>  $ Eh7    : int  -290 -268 -282 -232 -318 -308 -264 -340 -252 -288 ... #>  $ pH     : num  5 4.75 4.2 4.4 5.55 5.05 4.25 4.45 4.75 4.6 ... #>  $ buf    : num  2.34 2.66 4.18 3.6 1.9 3.22 4.5 3.5 2.62 3.04 ... #>  $ P      : num  20.2 15.6 18.7 22.8 37.8 ... #>  $ K      : num  1442 1299 1154 1045 522 ... #>  $ Ca     : num  2150 1845 1750 1674 3360 ... #>  $ Mg     : num  5169 4358 4041 3966 4609 ... #>  $ Na     : num  35185 28170 26455 25073 31664 ... #>  $ Mn     : num  14.29 7.73 17.81 49.15 30.52 ... #>  $ Zn     : num  16.5 14 15.3 17.3 22.3 ... #>  $ Cu     : num  5.02 4.19 4.79 4.09 4.6 ... #>  $ NH4    : num  59.5 51.4 68.8 82.3 70.9 ... biomass.mod <- lm (biomass ~ H2S + sal + Eh7 + pH + buf + P + K + Ca + Mg + Na +                            Mn + Zn + Cu + NH4,                  data=biomass) car::vif(biomass.mod) #>       H2S       sal       Eh7        pH       buf         P         K        Ca  #>  3.027456  3.387615  1.977447 62.080846 34.431748  1.895804  7.367110 16.662146  #>        Mg        Na        Mn        Zn        Cu       NH4  #> 23.764229 10.351043  6.185628 11.626479  4.829203  8.376506   (cd <- colldiag(biomass.mod, add.intercept=FALSE, center=TRUE)) #> Condition #> Index\tVariance Decomposition Proportions #>            H2S   sal   Eh7   pH    buf   P     K     Ca    Mg    Na    Mn    #> 1    1.000 0.002 0.001 0.002 0.001 0.001 0.008 0.000 0.002 0.000 0.000 0.003 #> 2    1.154 0.000 0.000 0.007 0.000 0.000 0.002 0.009 0.001 0.003 0.006 0.001 #> 3    1.750 0.011 0.067 0.066 0.001 0.001 0.008 0.000 0.002 0.000 0.000 0.000 #> 4    1.921 0.118 0.016 0.034 0.000 0.001 0.016 0.000 0.000 0.000 0.000 0.028 #> 5    2.668 0.000 0.110 0.020 0.000 0.001 0.426 0.001 0.004 0.001 0.008 0.000 #> 6    3.136 0.116 0.000 0.360 0.001 0.000 0.000 0.000 0.022 0.000 0.001 0.029 #> 7    3.574 0.077 0.113 0.116 0.000 0.001 0.155 0.002 0.002 0.000 0.008 0.007 #> 8    3.596 0.005 0.008 0.130 0.000 0.002 0.220 0.005 0.005 0.003 0.051 0.120 #> 9    5.447 0.056 0.055 0.156 0.000 0.002 0.019 0.256 0.013 0.000 0.005 0.007 #> 10   5.868 0.202 0.107 0.025 0.002 0.002 0.001 0.292 0.002 0.004 0.130 0.148 #> 11   7.529 0.189 0.027 0.003 0.000 0.040 0.007 0.074 0.181 0.007 0.052 0.136 #> 12  10.427 0.002 0.159 0.034 0.039 0.133 0.049 0.003 0.159 0.147 0.282 0.022 #> 13  12.843 0.001 0.089 0.019 0.000 0.120 0.076 0.283 0.013 0.671 0.247 0.162 #> 14  22.775 0.222 0.248 0.028 0.955 0.697 0.012 0.076 0.596 0.164 0.210 0.338 #>    Zn    Cu    NH4   #> 1  0.003 0.000 0.004 #> 2  0.000 0.009 0.000 #> 3  0.002 0.018 0.000 #> 4  0.001 0.002 0.001 #> 5  0.000 0.001 0.000 #> 6  0.000 0.003 0.035 #> 7  0.001 0.170 0.048 #> 8  0.010 0.042 0.007 #> 9  0.100 0.177 0.127 #> 10 0.000 0.024 0.129 #> 11 0.320 0.089 0.023 #> 12 0.094 0.426 0.240 #> 13 0.453 0.000 0.213 #> 14 0.015 0.041 0.173 # simplified display print(cd, fuzz=.3) #> Condition #> Index\tVariance Decomposition Proportions #>            H2S sal Eh7   pH    buf   P     K  Ca    Mg    Na Mn    Zn    Cu    #> 1    1.000  .   .   .     .     .     .     .  .     .     .  .     .     .    #> 2    1.154  .   .   .     .     .     .     .  .     .     .  .     .     .    #> 3    1.750  .   .   .     .     .     .     .  .     .     .  .     .     .    #> 4    1.921  .   .   .     .     .     .     .  .     .     .  .     .     .    #> 5    2.668  .   .   .     .     .    0.426  .  .     .     .  .     .     .    #> 6    3.136  .   .  0.360  .     .     .     .  .     .     .  .     .     .    #> 7    3.574  .   .   .     .     .     .     .  .     .     .  .     .     .    #> 8    3.596  .   .   .     .     .     .     .  .     .     .  .     .     .    #> 9    5.447  .   .   .     .     .     .     .  .     .     .  .     .     .    #> 10   5.868  .   .   .     .     .     .     .  .     .     .  .     .     .    #> 11   7.529  .   .   .     .     .     .     .  .     .     .  .    0.320  .    #> 12  10.427  .   .   .     .     .     .     .  .     .     .  .     .    0.426 #> 13  12.843  .   .   .     .     .     .     .  .    0.671  .  .    0.453  .    #> 14  22.775  .   .   .    0.955 0.697  .     . 0.596  .     . 0.338  .     .    #>    NH4 #> 1   .  #> 2   .  #> 3   .  #> 4   .  #> 5   .  #> 6   .  #> 7   .  #> 8   .  #> 9   .  #> 10  .  #> 11  .  #> 12  .  #> 13  .  #> 14  ."},{"path":"https://friendly.github.io/VisCollin/reference/cars.html","id":null,"dir":"Reference","previous_headings":"","what":"Cars Data — cars","title":"Cars Data — cars","text":"Data 1983 ASA Data Exposition, held conjunction Annual Meetings Toronto, August 15-18, 1983, https://community.amstat.org/jointscsg-section/dataexpo/dataexpobefore1993 data set collected Ernesto Ramos David Donoho characteristics automobiles.","code":""},{"path":"https://friendly.github.io/VisCollin/reference/cars.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Cars Data — cars","text":"data frame 406 observations following 10 variables: make make car, factor levels amc audi bmw buick cadillac chev chrysler citroen datsun dodge fiat ford hi honda mazda mercedes mercury nissan oldsmobile opel peugeot plymouth pontiac renault saab subaru toyota triumph volvo vw model model car, character vector mpg miles per gallon, numeric vector cylinder number cylinders, numeric vector engine engine displacement (cu. inches), numeric vector horse horsepower, numeric vector weight vehicle weight (lbs.), numeric vector accel time accelerate O 60 mph (sec.), numeric vector year model year (modulo 100), numeric vector ranging 70 -- 82 origin region origin, factor levels Amer Eur Japan","code":""},{"path":"https://friendly.github.io/VisCollin/reference/cars.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Cars Data — cars","text":"data provided ASA Data Exposition \"shar\" file, http://lib.stat.cmu.edu/datasets/cars.data. version used Donoho Ramos (1982) illustrate PRIM-H.","code":""},{"path":"https://friendly.github.io/VisCollin/reference/cars.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cars Data — cars","text":"Donoho, David Ramos, Ernesto (1982), ``PRIMDATA: Data Sets Use PRIM-H'' (Draft).","code":""},{"path":"https://friendly.github.io/VisCollin/reference/cars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cars Data — cars","text":"","code":"data(cars) cars.mod <- lm (mpg ~ cylinder + engine + horse + weight + accel + year,                 data=cars) car::vif(cars.mod) #>  cylinder    engine     horse    weight     accel      year  #> 10.633049 19.641683  9.398043 10.731681  2.625581  1.244829   (cd <- colldiag(cars.mod, center=TRUE)) #> Condition #> Index\tVariance Decomposition Proportions #>           cylinder engine horse weight accel year  #> 1   1.000 0.005    0.003  0.005 0.004  0.009 0.010 #> 2   2.252 0.004    0.002  0.000 0.007  0.022 0.787 #> 3   2.515 0.004    0.001  0.002 0.010  0.423 0.142 #> 4   5.660 0.309    0.014  0.306 0.087  0.063 0.005 #> 5   8.342 0.115    0.000  0.654 0.715  0.469 0.052 #> 6  10.818 0.563    0.981  0.032 0.176  0.013 0.004  # simplified display print(cd, fuzz=.3) #> Condition #> Index\tVariance Decomposition Proportions #>           cylinder engine horse weight accel year  #> 1   1.000  .        .      .     .      .     .    #> 2   2.252  .        .      .     .      .    0.787 #> 3   2.515  .        .      .     .     0.423  .    #> 4   5.660 0.309     .     0.306  .      .     .    #> 5   8.342  .        .     0.654 0.715  0.469  .    #> 6  10.818 0.563    0.981   .     .      .     ."},{"path":"https://friendly.github.io/VisCollin/reference/cellgram.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw one cell in a tableplot — cellgram","title":"Draw one cell in a tableplot — cellgram","text":"Draws graphic representing one values one cell tableplot, using shapes whose size proportional cell values visual attributes (outline color, fill color, outline line type, ...). Several values can shown cell, using different proportional shapes.","code":""},{"path":"https://friendly.github.io/VisCollin/reference/cellgram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw one cell in a tableplot — cellgram","text":"","code":"cellgram(   cell,   shape = 0,   shape.col = \"black\",   shape.lty = 1,   cell.fill = \"white\",   back.fill = \"white\",   label = 0,   label.size = 0.7,   ref.col = \"grey80\",   ref.grid = FALSE,   scale.max = 1,   shape.name = \"\" )"},{"path":"https://friendly.github.io/VisCollin/reference/cellgram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw one cell in a tableplot — cellgram","text":"cell Numeric value(s) depicted table cell shape Integer(s) character string(s) specifying shape(s) used encode numerical value cell. 0=\"circle\", 1=\"diamond\", 2=\"square\". Recycled match number values cell. shape.col Outline color(s) shape(s). Recycled match number values cell. shape.lty Outline line type(s) shape(s). Recycled match number values cell. cell.fill Inside color |smallest| shape cell back.fill Background color cell label Number cell values printed corners cell; max 4 label.size Character size cell label(s) ref.col color reference lines ref.grid whether draw ref lines cells scale.max scale values maximum shape.name character string uniquely identify shapes help fill smallest one","code":""},{"path":"https://friendly.github.io/VisCollin/reference/cellgram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw one cell in a tableplot — cellgram","text":"None. Used graphic side effect","code":""},{"path":"https://friendly.github.io/VisCollin/reference/cellgram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw one cell in a tableplot — cellgram","text":"","code":"# None"},{"path":"https://friendly.github.io/VisCollin/reference/colldiag.html","id":null,"dir":"Reference","previous_headings":"","what":"Collinearity Diagnostics — colldiag","title":"Collinearity Diagnostics — colldiag","text":"Calculates condition indexes variance decomposition proportions order test collinearity among independent variables regression model identifies sources collinearity present.","code":""},{"path":"https://friendly.github.io/VisCollin/reference/colldiag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collinearity Diagnostics — colldiag","text":"","code":"colldiag(mod, scale = TRUE, center = FALSE, add.intercept = FALSE)  # S3 method for colldiag print(x, dec.places = 3, fuzz = NULL, fuzzchar = \".\", ...)"},{"path":"https://friendly.github.io/VisCollin/reference/colldiag.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Collinearity Diagnostics — colldiag","text":"functions taken (now defunct) perturb package John Hendrickx. credits Stata program coldiag Joseph Harkness joe.harkness@jhu.edu, Johns Hopkins University.","code":""},{"path":"https://friendly.github.io/VisCollin/reference/colldiag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collinearity Diagnostics — colldiag","text":"mod model object, computed lm glm, data-frame used predictors model. scale FALSE, data left unscaled. TRUE, data scaled, typically mean 0 variance 1 using scale. Default TRUE. center TRUE, data centered. Default FALSE. add.intercept TRUE, intercept added. Default FALSE. x colldiag object dec.places Number decimal places use printing fuzz Variance decomposition proportions less fuzz printed fuzzchar fuzzchar Character small variance decomposition proportion values ... arguments passed methods (unused)","code":""},{"path":"https://friendly.github.io/VisCollin/reference/colldiag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collinearity Diagnostics — colldiag","text":"\"colldiag\" object, containing: condindx one-column matrix condition indexes pi square matrix variance decomposition proportions. rows refer principal component dimensions, columns predictor variables. print.colldiag prints condition indexes first column table variance decomposition proportions beside . print.colldiag fuzz option suppress printing small numbers. fuzz used, small values replaces period “.”. Fuzzchar can used specify alternative character.","code":""},{"path":"https://friendly.github.io/VisCollin/reference/colldiag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Collinearity Diagnostics — colldiag","text":"colldiag implementation regression collinearity diagnostic procedures found Belsley, Kuh, Welsch (1980). procedures examine “conditioning” matrix independent variables. computes condition indexes model matrix. largest condition index (condition number) large (Belsley et al suggest 30 higher), may collinearity problems. large condition indexes may worth investigating. colldiag also provides information may help identify source problems, variance decomposition proportions associated condition index. large condition index associated two variables large variance decomposition proportions, variables may causing collinearity problems.  Belsley et al suggest large proportion 50 percent . Note collinearity diagnostics often provided software model matrix including constant term intercept (e.g., SAS PROC REG, option COLLIN). However, generally useless misleading unless intercept real interpretation origin regressors contained within prediction space, explained Fox (1997, p. 351). default values scale, center add.intercept exclude constant term, correspond SAS option COLLINNOINT.","code":""},{"path":"https://friendly.github.io/VisCollin/reference/colldiag.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Collinearity Diagnostics — colldiag","text":"Missing data silently omitted calculations","code":""},{"path":"https://friendly.github.io/VisCollin/reference/colldiag.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Collinearity Diagnostics — colldiag","text":"Belsley, D..,  Kuh, E. Welsch, R. (1980). Regression Diagnostics, New York: John Wiley & Sons. Belsley, D.. (1991). Conditioning diagnostics, collinearity weak data regression. New York: John Wiley & Sons. Fox, J. (1997). Applied Regression Analysis, Linear Models, Related Methods. thousand Oaks, CA: Sage Publications. Friendly, M., & Kwan, E. (2009). ’s Waldo: Visualizing Collinearity Diagnostics. American Statistician, 63, 56–65.","code":""},{"path":[]},{"path":"https://friendly.github.io/VisCollin/reference/colldiag.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Collinearity Diagnostics — colldiag","text":"John Hendrickx","code":""},{"path":"https://friendly.github.io/VisCollin/reference/colldiag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collinearity Diagnostics — colldiag","text":"","code":"data(cars) cars.mod <- lm (mpg ~ cylinder + engine + horse + weight + accel + year,                 data=cars) car::vif(cars.mod) #>  cylinder    engine     horse    weight     accel      year  #> 10.633049 19.641683  9.398043 10.731681  2.625581  1.244829   # SAS PROC REG / COLLIN option, including the intercept colldiag(cars.mod, add.intercept = TRUE) #> Condition #> Index\tVariance Decomposition Proportions #>           intercept cylinder engine horse weight accel year  #> 1   1.000 0.000     0.000    0.000  0.000 0.000  0.000 0.000 #> 2   4.821 0.000     0.001    0.013  0.004 0.001  0.012 0.001 #> 3  16.620 0.003     0.023    0.065  0.270 0.006  0.078 0.003 #> 4  25.625 0.008     0.273    0.002  0.088 0.199  0.170 0.017 #> 5  36.384 0.007     0.548    0.914  0.001 0.271  0.021 0.013 #> 6  37.447 0.006     0.134    0.004  0.444 0.468  0.598 0.068 #> 7  91.281 0.976     0.020    0.002  0.191 0.055  0.122 0.898  # Default settings: scaled, not centered, no intercept, like SAS PROC REG / COLLINNOINT colldiag(cars.mod) #> Condition #> Index\tVariance Decomposition Proportions #>           cylinder engine horse weight accel year  #> 1   1.000 0.000    0.000  0.000 0.000  0.000 0.000 #> 2   4.757 0.001    0.013  0.005 0.000  0.023 0.007 #> 3  15.896 0.027    0.085  0.435 0.003  0.054 0.031 #> 4  24.742 0.379    0.004  0.036 0.229  0.157 0.168 #> 5  34.020 0.221    0.666  0.110 0.675  0.285 0.004 #> 6  35.464 0.372    0.230  0.414 0.093  0.480 0.790  (cd <- colldiag(cars.mod, center=TRUE)) #> Condition #> Index\tVariance Decomposition Proportions #>           cylinder engine horse weight accel year  #> 1   1.000 0.005    0.003  0.005 0.004  0.009 0.010 #> 2   2.252 0.004    0.002  0.000 0.007  0.022 0.787 #> 3   2.515 0.004    0.001  0.002 0.010  0.423 0.142 #> 4   5.660 0.309    0.014  0.306 0.087  0.063 0.005 #> 5   8.342 0.115    0.000  0.654 0.715  0.469 0.052 #> 6  10.818 0.563    0.981  0.032 0.176  0.013 0.004  # fuzz small values print(cd, fuzz = 0.5) #> Condition #> Index\tVariance Decomposition Proportions #>           cylinder engine horse weight accel year  #> 1   1.000  .        .      .     .      .     .    #> 2   2.252  .        .      .     .      .    0.787 #> 3   2.515  .        .      .     .      .     .    #> 4   5.660  .        .      .     .      .     .    #> 5   8.342  .        .     0.654 0.715   .     .    #> 6  10.818 0.563    0.981   .     .      .     .     # Biomass data data(biomass)  biomass.mod <- lm (biomass ~ H2S + sal + Eh7 + pH + buf + P + K +                              Ca + Mg + Na + Mn + Zn + Cu + NH4,                    data=biomass) car::vif(biomass.mod) #>       H2S       sal       Eh7        pH       buf         P         K        Ca  #>  3.027456  3.387615  1.977447 62.080846 34.431748  1.895804  7.367110 16.662146  #>        Mg        Na        Mn        Zn        Cu       NH4  #> 23.764229 10.351043  6.185628 11.626479  4.829203  8.376506   cd <- colldiag(biomass.mod, center=TRUE) # simplified display print(colldiag(biomass.mod, center=TRUE), fuzz=.3) #> Condition #> Index\tVariance Decomposition Proportions #>            H2S sal Eh7   pH    buf   P     K  Ca    Mg    Na Mn    Zn    Cu    #> 1    1.000  .   .   .     .     .     .     .  .     .     .  .     .     .    #> 2    1.154  .   .   .     .     .     .     .  .     .     .  .     .     .    #> 3    1.750  .   .   .     .     .     .     .  .     .     .  .     .     .    #> 4    1.921  .   .   .     .     .     .     .  .     .     .  .     .     .    #> 5    2.668  .   .   .     .     .    0.426  .  .     .     .  .     .     .    #> 6    3.136  .   .  0.360  .     .     .     .  .     .     .  .     .     .    #> 7    3.574  .   .   .     .     .     .     .  .     .     .  .     .     .    #> 8    3.596  .   .   .     .     .     .     .  .     .     .  .     .     .    #> 9    5.447  .   .   .     .     .     .     .  .     .     .  .     .     .    #> 10   5.868  .   .   .     .     .     .     .  .     .     .  .     .     .    #> 11   7.529  .   .   .     .     .     .     .  .     .     .  .    0.320  .    #> 12  10.427  .   .   .     .     .     .     .  .     .     .  .     .    0.426 #> 13  12.843  .   .   .     .     .     .     .  .    0.671  .  .    0.453  .    #> 14  22.775  .   .   .    0.955 0.697  .     . 0.596  .     . 0.338  .     .    #>    NH4 #> 1   .  #> 2   .  #> 3   .  #> 4   .  #> 5   .  #> 6   .  #> 7   .  #> 8   .  #> 9   .  #> 10  .  #> 11  .  #> 12  .  #> 13  .  #> 14  .   # None yet"},{"path":"https://friendly.github.io/VisCollin/reference/consumption.html","id":null,"dir":"Reference","previous_headings":"","what":"Consumption Function Dataset — consumption","title":"Consumption Function Dataset — consumption","text":"Example pp 149-154 Belsley (1991), Conditioning Diagnostics","code":""},{"path":"https://friendly.github.io/VisCollin/reference/consumption.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Consumption Function Dataset — consumption","text":"data frame 28 observations following 5 variables. year 1947 1974 cons total consumption, 1958 dollars rate interest rate (Moody's Aaa) dpi disposable income, 1958 dollars d_dpi annual change disposable income","code":""},{"path":"https://friendly.github.io/VisCollin/reference/consumption.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Consumption Function Dataset — consumption","text":"Belsley, D.. (1991). Conditioning diagnostics, collinearity weak data regression. New York: John Wiley & Sons.","code":""},{"path":"https://friendly.github.io/VisCollin/reference/consumption.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Consumption Function Dataset — consumption","text":"","code":"data(consumption)  ct1 <- with(consumption, c(NA,cons[-length(cons)])) # compare (5.3) m1 <- lm(cons ~ ct1 + dpi + rate + d_dpi, data = consumption) anova(m1) #> Analysis of Variance Table #>  #> Response: cons #>           Df Sum Sq Mean Sq    F value    Pr(>F)     #> ct1        1 300165  300165 23721.4022 < 2.2e-16 *** #> dpi        1   1653    1653   130.6481 1.006e-10 *** #> rate       1     24      24     1.9073    0.1811     #> d_dpi      1     10      10     0.7685    0.3902     #> Residuals 22    278      13                          #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  # compare exhibit 5.11 with(consumption, cor(cbind(ct1, dpi, rate, d_dpi), use=\"complete.obs\")) #>             ct1       dpi      rate     d_dpi #> ct1   1.0000000 0.9973816 0.9746852 0.3138422 #> dpi   0.9973816 1.0000000 0.9669347 0.3765246 #> rate  0.9746852 0.9669347 1.0000000 0.2290986 #> d_dpi 0.3138422 0.3765246 0.2290986 1.0000000 # compare exhibit 5.12 cd<-colldiag(m1) cd #> Condition #> Index\tVariance Decomposition Proportions #>            ct1   dpi   rate  d_dpi #> 1    1.000 0.000 0.000 0.000 0.003 #> 2    3.767 0.000 0.000 0.003 0.178 #> 3   26.437 0.005 0.003 0.827 0.053 #> 4  256.573 0.995 0.997 0.169 0.765 print(cd,fuzz=.3) #> Condition #> Index\tVariance Decomposition Proportions #>            ct1   dpi   rate  d_dpi #> 1    1.000  .     .     .     .    #> 2    3.767  .     .     .     .    #> 3   26.437  .     .    0.827  .    #> 4  256.573 0.995 0.997  .    0.765"},{"path":"https://friendly.github.io/VisCollin/reference/make.patterns.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct collection of pattern specifications for tableplot — make.patterns","title":"Construct collection of pattern specifications for tableplot — make.patterns","text":"Construct collection pattern specifications tableplot","code":""},{"path":"https://friendly.github.io/VisCollin/reference/make.patterns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct collection of pattern specifications for tableplot — make.patterns","text":"","code":"make.patterns(   n = NULL,   shape = 0,   shape.col = \"black\",   shape.lty = 1,   cell.fill = \"white\",   back.fill = \"white\",   label = 0,   label.size = 0.7,   ref.col = \"gray80\",   ref.grid = FALSE,   scale.max = 1,   as.data.frame = FALSE )"},{"path":"https://friendly.github.io/VisCollin/reference/make.patterns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct collection of pattern specifications for tableplot — make.patterns","text":"n Number patterns shape Shape(s) used encode numerical value cell. 0=\"circle\", 1=\"diamond\", 2=\"square\". Recycled match number values cell. shape.col Outline color(s) shape(s) shape.lty Outline line type(s) shape(s) cell.fill inside color |smallest| shape cell back.fill background color cell label many cell values labeled cell; max 4 label.size size cell label(s) ref.col color reference lines ref.grid whether draw ref lines cells scale.max scale values maximum .data.frame whether return data.frame list.","code":""},{"path":"https://friendly.github.io/VisCollin/reference/make.patterns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct collection of pattern specifications for tableplot — make.patterns","text":"Returns either data.frame list. data.frame, pattern specifications appear columns","code":""},{"path":"https://friendly.github.io/VisCollin/reference/make.patterns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct collection of pattern specifications for tableplot — make.patterns","text":"","code":"# None"},{"path":"https://friendly.github.io/VisCollin/reference/tableplot.colldiag.html","id":null,"dir":"Reference","previous_headings":"","what":"Tableplot for Collinearity Diagnostics — tableplot.colldig","title":"Tableplot for Collinearity Diagnostics — tableplot.colldig","text":"methods produce tableplot collinearity diagnostics, showing condition indices variance proportions predictors linear generalized linear regression model. encodes condition indices using squares whose background color red condition indices > 10, green values > 5 green otherwise, reflecting danger, warning OK respectively. value condition index encoded within using white square proportional value (maximum value, cond.max), Variance decomposition proportions shown filled circles whose radius proportional values filled (default) shades ranging white pink red. Rounded values diagnostics printed cells.","code":""},{"path":"https://friendly.github.io/VisCollin/reference/tableplot.colldiag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tableplot for Collinearity Diagnostics — tableplot.colldig","text":"","code":"# S3 method for lm tableplot(values, ...)  # S3 method for glm tableplot(values, ...)  # S3 method for colldiag tableplot(   values,   prop.col = c(\"white\", \"pink\", \"red\"),   cond.col = c(\"#A8F48D\", \"#DDAB3E\", \"red\"),   cond.max = 100,   prop.breaks = c(0, 20, 50, 100),   cond.breaks = c(0, 5, 10, 1000),   show.rows = nvar:1,   title = \"\",   patterns,   ... )"},{"path":"https://friendly.github.io/VisCollin/reference/tableplot.colldiag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tableplot for Collinearity Diagnostics — tableplot.colldig","text":"values \"colldiag\", \"lm\" \"glm\" object ... arguments, consistency generic prop.col vector colors used variance proportions. default c(\"white\", \"pink\", \"red\"). cond.col vector colors used condition indices cond.max Maximum value scale white squares condition indices prop.breaks Scale breaks variance proportions cond.breaks Scale breaks condition indices show.rows Rows eigenvalue decompositon model matrix show display. default nvar:1 puts smallest dimensions top display. title title used resulting graphic patterns pattern matrix used table plot.","code":""},{"path":"https://friendly.github.io/VisCollin/reference/tableplot.colldiag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tableplot for Collinearity Diagnostics — tableplot.colldig","text":"None. Used graphic side-effect","code":""},{"path":"https://friendly.github.io/VisCollin/reference/tableplot.colldiag.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Tableplot for Collinearity Diagnostics — tableplot.colldig","text":"Tableplots produced using grid graphics using viewports draw successive cell display. use .Rmd documents using knitr, use chunk option fig.keep = \"last\" final figure shown output.","code":""},{"path":"https://friendly.github.io/VisCollin/reference/tableplot.colldiag.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Tableplot for Collinearity Diagnostics — tableplot.colldig","text":"Friendly, M., & Kwan, E. (2009). \"’s Waldo: Visualizing Collinearity Diagnostics.\" American Statistician, 63, 56–65. Online: https://www.datavis.ca/papers/viscollin-tast.pdf.","code":""},{"path":"https://friendly.github.io/VisCollin/reference/tableplot.colldiag.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Tableplot for Collinearity Diagnostics — tableplot.colldig","text":"Michael Friendly","code":""},{"path":"https://friendly.github.io/VisCollin/reference/tableplot.colldiag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tableplot for Collinearity Diagnostics — tableplot.colldig","text":"","code":"# None yet"},{"path":"https://friendly.github.io/VisCollin/reference/tableplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Tableplot: A Semi-graphic Display of a Table — tableplot","title":"Tableplot: A Semi-graphic Display of a Table — tableplot","text":"tableplot (Kwan, 2008) designed semi-graphic display form table numeric values, supplemented symbols size proportional cell value(s), visual attributes (shape, color fill, background fill, etc.) can used encode information essential direct visual understanding.  Three-way arrays, last dimension corresponds levels factor first two dimensions compared handled superimposing symbols. specifications cell given types argument, whose elements refer attributes specified patterns.","code":""},{"path":"https://friendly.github.io/VisCollin/reference/tableplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tableplot: A Semi-graphic Display of a Table — tableplot","text":"","code":"tableplot(values, ...)  # S3 method for default tableplot(   values,   types,   patterns = list(list(0, \"black\", 1, \"white\", \"white\", 0, 0.5, \"grey80\", FALSE, 1)),   title = \"Tableplot\",   side.label = \"row\",   top.label = \"col\",   table.label = TRUE,   label.size = 1,   side.rot = 0,   gap = 2,   v.parts = 0,   h.parts = 0,   cor.matrix = FALSE,   var.names = \"var\",   ... )"},{"path":"https://friendly.github.io/VisCollin/reference/tableplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tableplot: A Semi-graphic Display of a Table — tableplot","text":"values matrix 3-dimensional array values displayed tableplot ... Arguments passed tableplot.default types Matrix specification assignments, size first two dimensions values. Entries refer sub-lists patterns. Defaults matrix 1s, matrix(1, dim(values)[1], dim(values[2])), indicating cells use pattern specification. patterns List lists; list one specification arguments cellgram. title Main title side.label character vector providing labels rows tableplot top.label character vector providing labels columns tableplot table.label Whether print row/column labels label.size Character size labels side.rot Degree rotation (positive counter-clockwise) gap Width gap partition, partitions requested v.parts /h.parts v.parts integer vector giving number columns two partitions table. provided, sum must equal number columns. h.parts integer vector giving number rows two partitions table. provided, sum must equal number rows. cor.matrix Logical. TRUE correlation matrix var.names list variable names","code":""},{"path":"https://friendly.github.io/VisCollin/reference/tableplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tableplot: A Semi-graphic Display of a Table — tableplot","text":"None. Used graphic side effect","code":""},{"path":"https://friendly.github.io/VisCollin/reference/tableplot.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Tableplot: A Semi-graphic Display of a Table — tableplot","text":"original version tableplots now-defunct tableplot package https://cran.r-project.org/package=tableplot. current implementation modest re-design focused use collinearity diagnostics, usable general contexts.","code":""},{"path":"https://friendly.github.io/VisCollin/reference/tableplot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Tableplot: A Semi-graphic Display of a Table — tableplot","text":"Kwan, E. (2008). Improving Factor Analysis Psychology: Innovations Based Null Hypothesis Significance Testing Controversy. Ph. D. thesis,  York University.","code":""},{"path":[]},{"path":"https://friendly.github.io/VisCollin/reference/tableplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Tableplot: A Semi-graphic Display of a Table — tableplot","text":"Ernest Kwan Michael Friendly","code":""},{"path":"https://friendly.github.io/VisCollin/reference/tableplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tableplot: A Semi-graphic Display of a Table — tableplot","text":"","code":"data(cars) cars.mod <- lm (mpg ~ cylinder + engine + horse + weight + accel + year,                 data=cars) car::vif(cars.mod) #>  cylinder    engine     horse    weight     accel      year  #> 10.633049 19.641683  9.398043 10.731681  2.625581  1.244829   (cd <- colldiag(cars.mod, center=TRUE)) #> Condition #> Index\tVariance Decomposition Proportions #>           cylinder engine horse weight accel year  #> 1   1.000 0.005    0.003  0.005 0.004  0.009 0.010 #> 2   2.252 0.004    0.002  0.000 0.007  0.022 0.787 #> 3   2.515 0.004    0.001  0.002 0.010  0.423 0.142 #> 4   5.660 0.309    0.014  0.306 0.087  0.063 0.005 #> 5   8.342 0.115    0.000  0.654 0.715  0.469 0.052 #> 6  10.818 0.563    0.981  0.032 0.176  0.013 0.004 tableplot(cd, title = \"Tableplot of cars data\", cond.max = 30 )"},{"path":"https://friendly.github.io/VisCollin/news/index.html","id":"viscollin-011","dir":"Changelog","previous_headings":"","what":"VisCollin 0.1.1","title":"VisCollin 0.1.1","text":"CRAN release: 2023-08-17 Correct minor CRAN nits DESCRIPTION Add baseball data example examples/ Lifecycle: stable Extend README corrplot::corrplot() Remedies","code":""},{"path":"https://friendly.github.io/VisCollin/news/index.html","id":"viscollin-010","dir":"Changelog","previous_headings":"","what":"VisCollin 0.1.0","title":"VisCollin 0.1.0","text":"Implements function colldiag() tableplot() methods collinearity diagnostics. Added cars, biomass data Added extended README.Rmd Initial CRAN submission.","code":""}]
